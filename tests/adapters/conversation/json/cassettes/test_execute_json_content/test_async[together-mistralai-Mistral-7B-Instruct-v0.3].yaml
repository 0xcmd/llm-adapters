interactions:
- request:
    body: '{"messages": [{"role": "user", "content": [{"type": "text", "text": "Hi"},
      {"type": "text", "text": "Hi"}]}], "model": "mistralai/Mistral-7B-Instruct-v0.3",
      "stream": false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '173'
      content-type:
      - application/json
      host:
      - api.together.xyz
      user-agent:
      - AsyncOpenAI/Python 1.54.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.54.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.together.xyz/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"8df86b147fcff99b-SJC\",\n  \"object\": \"chat.completion\",\n
        \ \"created\": 1731098847,\n  \"model\": \"mistralai/Mistral-7B-Instruct-v0.3\",\n
        \ \"prompt\": [],\n  \"choices\": [\n    {\n      \"finish_reason\": \"eos\",\n
        \     \"seed\": 14215707214587750000,\n      \"logprobs\": null,\n      \"index\":
        0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\":
        \" It seems like you've provided two JavaScript objects as strings. To interpret
        these objects, I'll need to assume they are JSON-formatted strings. Here's
        an example of how you can convert them back into JavaScript objects:\\n\\n```javascript\\nlet
        obj1 = JSON.parse('[object Object]');\\nlet obj2 = JSON.parse('[object Object]');\\n```\\n\\nHowever,
        this will result in empty objects because the original strings don't contain
        any actual data. If you have the actual JSON data, you can replace the string
        literals with the JSON data to create non-empty objects.\\n\\nFor example:\\n\\n```javascript\\nlet
        obj1 = JSON.parse('{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}');\\nlet
        obj2 = JSON.parse('{\\\"key3\\\": \\\"value3\\\", \\\"key4\\\": \\\"value4\\\"}');\\n```\\n\\nThis
        will create two objects with the given keys and values.\",\n        \"tool_calls\":
        []\n      }\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 14,\n    \"completion_tokens\":
        212,\n    \"total_tokens\": 226\n  }\n}"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8df86b147fcff99b-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Fri, 08 Nov 2024 20:47:31 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=2592000; includeSubDomains
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1296'
      etag:
      - W/"510-YbicNrPqXDjUDwrXHIrmSeQCtT8"
      x-api-call-end:
      - '2024-11-08T20:47:31.842Z'
      x-api-call-start:
      - '2024-11-08T20:47:27.477Z'
      x-api-received:
      - '2024-11-08T20:47:27.470Z'
      x-inference-version:
      - v2
      x-ratelimit:
      - 'false'
      x-ratelimit-limit:
      - '100'
      x-ratelimit-limit-tokens:
      - '100000'
      x-ratelimit-remaining:
      - '199'
      x-ratelimit-remaining-tokens:
      - '99900'
      x-ratelimit-reset:
      - '2'
    status:
      code: 200
      message: OK
version: 1
