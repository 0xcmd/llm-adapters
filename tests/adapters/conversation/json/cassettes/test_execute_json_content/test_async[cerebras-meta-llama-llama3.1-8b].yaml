interactions:
- request:
    body: '{"messages": [{"role": "user", "content": [{"type": "text", "text": "Hi"},
      {"type": "text", "text": "Hi"}]}], "model": "llama3.1-8b", "stream": false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '150'
      content-type:
      - application/json
      host:
      - api.cerebras.ai
      user-agent:
      - AsyncOpenAI/Python 1.54.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.54.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.cerebras.ai/v1/chat/completions
  response:
    body:
      string: '{"id":"chatcmpl-d8def0d2-1456-4dff-9b6c-57f71207e36a","choices":[{"finish_reason":"stop","index":0,"message":{"content":"This
        appears to be a JSON (JavaScript Object Notation) formatted array of objects.
        Each object contains ''type'' and ''text'' keys, with ''text'' containing
        a greeting message: ''Hi''.\n\nHere''s how you might parse this in Python:\n\n```python\nimport
        json\n\n# Define the JSON data\ndata = [{''type'': ''text'', ''text'': ''Hi''},
        {''type'': ''text'', ''text'': ''Hi''}]\n\n# Parse the JSON data\nparsed_data
        = json.loads(json.dumps(data))\n\n# Print the parsed data\nprint(parsed_data)\n\n#
        Access the ''text'' value\nfor message in parsed_data:\n    print(message[''text''])\n```\n\nAlternatively,
        you could use a library like `nltk` (Natural Language Toolkit) to work with
        the text data more conveniently:\n\n```python\nimport nltk\n\n# Define the
        JSON data\ndata = [{''type'': ''text'', ''text'': ''Hi''}, {''type'': ''text'',
        ''text'': ''Hi''}]\n\n# Print the ''text'' value\nfor message in data:\n    print(message[''text''])\n```\n\nNote
        that you would need to install the `nltk` library first, and download the
        required data using `nltk.download(''punkt'')`.","role":"assistant"}}],"created":1731046904,"model":"llama3.1-8b","system_fingerprint":"fp_55ebaf7e1e","object":"chat.completion","usage":{"prompt_tokens":61,"completion_tokens":253,"total_tokens":314},"time_info":{"queue_time":2.719e-05,"prompt_time":0.003485316908730159,"completion_time":0.11472995709126985,"total_time":0.13216924667358398,"created":1731046904}}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 08 Nov 2024 06:21:45 GMT
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 d643c18c094f3cd17f1bf4efe422c294.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - yN4Q1qfmF1uywMqPis1yLOw4xECWYgF91X3LCoLNEPIxIv_1rRSBDg==
      X-Amz-Cf-Pop:
      - SFO20-C1
      X-Cache:
      - Miss from cloudfront
      content-length:
      - '1505'
      referrer-policy:
      - strict-origin-when-cross-origin
      server:
      - uvicorn
      strict-transport-security:
      - max-age=3600; includeSubDomains
      vary:
      - accept-encoding
      x-content-type-options:
      - nosniff
      x-ratelimit-limit-requests-day:
      - '14400'
      x-ratelimit-limit-tokens-minute:
      - '60000'
      x-ratelimit-remaining-requests-day:
      - '14398'
      x-ratelimit-remaining-tokens-minute:
      - '59889'
      x-ratelimit-reset-requests-day:
      - '63494.965351343155'
      x-ratelimit-reset-tokens-minute:
      - '14.965351343154907'
      x-request-id:
      - yN4Q1qfmF1uywMqPis1yLOw4xECWYgF91X3LCoLNEPIxIv_1rRSBDg==
    status:
      code: 200
      message: OK
version: 1
