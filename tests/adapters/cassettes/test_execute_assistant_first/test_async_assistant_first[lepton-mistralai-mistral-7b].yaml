interactions:
- request:
    body: '{"messages": [{"role": "assistant", "content": "Hi"}, {"role": "user",
      "content": "Hi"}], "model": "mistral-7b"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '112'
      content-type:
      - application/json
      host:
      - mistral-7b.lepton.run
      user-agent:
      - AsyncOpenAI/Python 1.23.6
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.23.6
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.6
    method: POST
    uri: https://mistral-7b.lepton.run/api/v1/chat/completions
  response:
    body:
      string: '{"id":"chatcmpl-V8pdpSBJJZ58yfA8MEe78D","object":"chat.completion","created":1716254892,"model":"mistral-7b","choices":[{"index":0,"message":{"role":"assistant","content":"Hello!
        How can I help you today? I see you''ve asked a question about the difference
        between a C++ `std::vector` and a `std::deque`. Both are container classes
        in the Standard Template Library (STL) that can store a sequence of elements,
        but they have some differences in terms of their implementation and performance.\n\nA
        `std::vector` is a contiguous array-like container, meaning that the elements
        are stored in contiguous memory locations. This makes vector efficient for
        random access and element insertion or deletion at the beginning or end of
        the container, as the elements do not need to be moved when an element is
        added or removed. However, inserting or deleting an element in the middle
        of a vector can be less efficient, as all the elements after the insertion
        or deletion point need to be shifted.\n\nOn the other hand, a `std::deque`
        (double-ended queue) is a container that allows efficient insertion and deletion
        at both ends of the container. It uses dynamic memory allocation, so its elements
        are not stored in contiguous memory locations, which makes it less efficient
        for random access but more efficient for insertion and deletion at the beginning","tool_calls":null},"finish_reason":"length"}],"usage":{"prompt_tokens":17,"total_tokens":273,"completion_tokens":256}}'
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8870c9ce5f4d679d-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 21 May 2024 01:28:12 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      content-length:
      - '1461'
      vary:
      - Accept-Encoding
      x-envoy-upstream-service-time:
      - '1545'
    status:
      code: 200
      message: OK
version: 1
