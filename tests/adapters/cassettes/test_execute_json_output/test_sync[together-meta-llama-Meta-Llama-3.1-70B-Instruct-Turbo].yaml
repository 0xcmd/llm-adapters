interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hi, use json"}], "model": "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
      "response_format": {"type": "json_object"}, "stream": false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '177'
      content-type:
      - application/json
      host:
      - api.together.xyz
      user-agent:
      - OpenAI/Python 1.52.2
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.52.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.together.xyz/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"8da72be6ee9c156b-SJC\",\n  \"object\": \"chat.completion\",\n
        \ \"created\": 1730246913,\n  \"model\": \"meta-llama/Meta-Llama-3.1-70B-Instruct\",\n
        \ \"prompt_logprobs\": null,\n  \"prompt\": [],\n  \"choices\": [\n    {\n
        \     \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n
        \       \"content\": \"JSON (JavaScript Object Notation) is a lightweight
        data interchange format that is easy to read and write. It is widely used
        for exchanging data between web servers, web applications, and mobile apps.\\n\\nHere
        is an example of a JSON object:\\n```json\\n{\\n  \\\"name\\\": \\\"John Doe\\\",\\n
        \ \\\"age\\\": 30,\\n  \\\"city\\\": \\\"New York\\\",\\n  \\\"interests\\\":
        [\\\"reading\\\", \\\"hiking\\\", \\\"coding\\\"],\\n  \\\"address\\\": {\\n
        \   \\\"street\\\": \\\"123 Main St\\\",\\n    \\\"state\\\": \\\"NY\\\",\\n
        \   \\\"zip\\\": \\\"10001\\\"\\n  }\\n}\\n```\\nIn this example, we have
        a JSON object with the following properties:\\n\\n* `name`: a string\\n* `age`:
        a number\\n* `city`: a string\\n* `interests`: an array of strings\\n* `address`:
        an object with properties `street`, `state`, and `zip`\\n\\nYou can access
        the properties of a JSON object using dot notation, like this:\\n```javascript\\nconst
        person = {\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"age\\\": 30,\\n  \\\"city\\\":
        \\\"New York\\\",\\n  \\\"interests\\\": [\\\"reading\\\", \\\"hiking\\\",
        \\\"coding\\\"],\\n  \\\"address\\\": {\\n    \\\"street\\\": \\\"123 Main
        St\\\",\\n    \\\"state\\\": \\\"NY\\\",\\n    \\\"zip\\\": \\\"10001\\\"\\n
        \ }\\n};\\n\\nconsole.log(person.name); // outputs \\\"John Doe\\\"\\nconsole.log(person.age);
        // outputs 30\\nconsole.log(person.address.street); // outputs \\\"123 Main
        St\\\"\\n```\\nYou can also use JSON arrays, which are ordered collections
        of values. Here is an example:\\n```json\\n[\\n  {\\n    \\\"name\\\": \\\"John
        Doe\\\",\\n    \\\"age\\\": 30\\n  },\\n  {\\n    \\\"name\\\": \\\"Jane Doe\\\",\\n
        \   \\\"age\\\": 25\\n  },\\n  {\\n    \\\"name\\\": \\\"Bob Smith\\\",\\n
        \   \\\"age\\\": 40\\n  }\\n]\\n```\\nIn this example, we have a JSON array
        with three objects, each with properties `name` and `age`. You can access
        the elements of a JSON array using indexing, like this:\\n```javascript\\nconst
        people = [\\n  {\\n    \\\"name\\\": \\\"John Doe\\\",\\n    \\\"age\\\":
        30\\n  },\\n  {\\n    \\\"name\\\": \\\"Jane Doe\\\",\\n    \\\"age\\\": 25\\n
        \ },\\n  {\\n    \\\"name\\\": \\\"Bob Smith\\\",\\n    \\\"age\\\": 40\\n
        \ }\\n];\\n\\nconsole.log(people[0].name); // outputs \\\"John Doe\\\"\\nconsole.log(people[1].age);
        // outputs 25\\nconsole.log(people[2].name); // outputs \\\"Bob Smith\\\"\\n```\\nCommon
        JSON data types:\\n\\n* Strings: `\\\"hello world\\\"`\\n* Numbers: `42`\\n*
        Booleans: `true` or `false`\\n* Arrays: `[1, 2, 3]`\\n* Objects: `{\\\"name\\\":
        \\\"John\\\", \\\"age\\\": 30}`\\n* Null: `null`\\n\\nCommon JSON operations:\\n\\n*
        Parsing: converting a JSON string to a JavaScript object\\n* Stringifying:
        converting a JavaScript object to a JSON string\\n* Accessing: accessing the
        properties of a JSON object using dot notation\\n* Modifying: modifying the
        properties of a JSON object\\n\\nJSON is widely used in many areas, including:\\n\\n*
        Web APIs: JSON is often used as the data format for web APIs\\n* Data storage:
        JSON is often used as a data storage format for web applications\\n* Configuration
        files: JSON is often used as a configuration file format for web applications\\n*
        Data exchange: JSON is often used for exchanging data between web applications
        and mobile apps\",\n        \"tool_calls\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        39,\n    \"total_tokens\": 785,\n    \"completion_tokens\": 746\n  }\n}"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8da72be6ee9c156b-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 30 Oct 2024 00:08:48 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=2592000; includeSubDomains
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '3419'
      etag:
      - W/"d5b-wLqMZFFDt0GVvL4CqpHEJC9nSjU"
      x-api-call-end:
      - '2024-10-30T00:08:48.718Z'
      x-api-call-start:
      - '2024-10-30T00:08:33.131Z'
      x-api-received:
      - '2024-10-30T00:08:33.125Z'
      x-inference-version:
      - v2
      x-ratelimit:
      - 'false'
      x-ratelimit-limit:
      - '100'
      x-ratelimit-limit-tokens:
      - '100000'
      x-ratelimit-remaining:
      - '199'
      x-ratelimit-remaining-tokens:
      - '99775'
      x-ratelimit-reset:
      - '2'
    status:
      code: 200
      message: OK
version: 1
