interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hi, use json"}], "model": "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
      "response_format": {"type": "json_object"}, "stream": false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '177'
      content-type:
      - application/json
      host:
      - api.together.xyz
      user-agent:
      - OpenAI/Python 1.53.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.53.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.together.xyz/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"8daf4d9f0bfd9e58-SJC\",\n  \"object\": \"chat.completion\",\n
        \ \"created\": 1730332180,\n  \"model\": \"meta-llama/Meta-Llama-3.1-70B-Instruct\",\n
        \ \"prompt_logprobs\": null,\n  \"prompt\": [],\n  \"choices\": [\n    {\n
        \     \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n
        \       \"content\": \"JSON (JavaScript Object Notation) is a lightweight,
        easy-to-read data interchange format. It is widely used for exchanging data
        between web servers, web applications, and mobile apps.\\n\\n### Basic JSON
        Syntax\\n\\nJSON data is represented as a collection of key-value pairs, arrays,
        and objects.\\n\\n```json\\n{\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"age\\\":
        30,\\n  \\\"city\\\": \\\"New York\\\",\\n  \\\"hobbies\\\": [\\\"reading\\\",
        \\\"writing\\\", \\\"coding\\\"],\\n  \\\"address\\\": {\\n    \\\"street\\\":
        \\\"123 Main St\\\",\\n    \\\"state\\\": \\\"NY\\\",\\n    \\\"country\\\":
        \\\"USA\\\"\\n  }\\n}\\n```\\n\\n### JSON Data Types\\n\\nJSON supports the
        following data types:\\n\\n*   **String**: a sequence of characters, e.g.,
        \\\"hello\\\"\\n*   **Number**: a numeric value, e.g., 42\\n*   **Boolean**:
        a true or false value\\n*   **Array**: an ordered list of values, e.g., [\\\"a\\\",
        \\\"b\\\", \\\"c\\\"]\\n*   **Object**: an unordered collection of key-value
        pairs, e.g., {\\\"name\\\": \\\"John\\\", \\\"age\\\": 30}\\n*   **Null**:
        a null or undefined value\\n\\n### JSON Example Use Case\\n\\nSuppose we want
        to store information about a book in a JSON object.\\n\\n```json\\n{\\n  \\\"title\\\":
        \\\"To Kill a Mockingbird\\\",\\n  \\\"author\\\": \\\"Harper Lee\\\",\\n
        \ \\\"publisher\\\": \\\"J.B. Lippincott & Co.\\\",\\n  \\\"year\\\": 1960,\\n
        \ \\\"genres\\\": [\\\"Fiction\\\", \\\"Classics\\\"],\\n  \\\"awards\\\":
        [\\\"Pulitzer Prize\\\"]\\n}\\n```\\n\\n### Parsing JSON in JavaScript\\n\\nTo
        parse a JSON string in JavaScript, you can use the `JSON.parse()` method.\\n\\n```javascript\\nconst
        jsonString = '{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30}';\\nconst
        jsonData = JSON.parse(jsonString);\\nconsole.log(jsonData.name); // Output:
        John Doe\\nconsole.log(jsonData.age);   // Output: 30\\n```\\n\\n### Generating
        JSON in JavaScript\\n\\nTo generate a JSON string from a JavaScript object,
        you can use the `JSON.stringify()` method.\\n\\n```javascript\\nconst data
        = { name: \\\"John Doe\\\", age: 30 };\\nconst jsonString = JSON.stringify(data);\\nconsole.log(jsonString);
        // Output: {\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30}\\n```\\n\\n###
        Common JSON Operations\\n\\nSome common JSON operations include:\\n\\n*   **Parsing**:
        converting a JSON string to a JavaScript object\\n*   **Stringifying**: converting
        a JavaScript object to a JSON string\\n*   **Accessing**: accessing the values
        of a JSON object using dot notation or bracket notation\\n*   **Modifying**:
        modifying the values of a JSON object\\n*   **Validating**: checking if a
        JSON string is valid and conforms to the JSON syntax\",\n        \"tool_calls\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 39,\n    \"total_tokens\":
        628,\n    \"completion_tokens\": 589\n  }\n}"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8daf4d9f0bfd9e58-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 30 Oct 2024 23:49:54 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=2592000; includeSubDomains
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '2906'
      etag:
      - W/"b5a-J5d3/aDA4ypuUwScgyxkgnmDBag"
      x-api-call-end:
      - '2024-10-30T23:49:54.920Z'
      x-api-call-start:
      - '2024-10-30T23:49:40.351Z'
      x-api-received:
      - '2024-10-30T23:49:40.345Z'
      x-inference-version:
      - v2
      x-ratelimit:
      - 'false'
      x-ratelimit-limit:
      - '100'
      x-ratelimit-limit-tokens:
      - '100000'
      x-ratelimit-remaining:
      - '196'
      x-ratelimit-remaining-tokens:
      - '99795'
      x-ratelimit-reset:
      - '0'
    status:
      code: 200
      message: OK
version: 1
