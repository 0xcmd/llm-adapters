interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hi, use json"}], "model": "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
      "response_format": {"type": "json_object"}, "stream": false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '177'
      content-type:
      - application/json
      host:
      - api.together.xyz
      user-agent:
      - AsyncOpenAI/Python 1.52.2
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.52.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.together.xyz/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"8da72c5798c19e76-SJC\",\n  \"object\": \"chat.completion\",\n
        \ \"created\": 1730246931,\n  \"model\": \"meta-llama/Meta-Llama-3.1-70B-Instruct\",\n
        \ \"prompt_logprobs\": null,\n  \"prompt\": [],\n  \"choices\": [\n    {\n
        \     \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n
        \       \"content\": \"JSON (JavaScript Object Notation) is a lightweight
        data interchange format that is easy to read and write. It is widely used
        for exchanging data between web servers, web applications, and mobile apps.\\n\\nHere's
        an example of a simple JSON object:\\n\\n```\\n{\\n  \\\"name\\\": \\\"John
        Doe\\\",\\n  \\\"age\\\": 30,\\n  \\\"city\\\": \\\"New York\\\"\\n}\\n```\\n\\nIn
        this example, the JSON object has three key-value pairs:\\n\\n*   `\\\"name\\\"`
        with the value `\\\"John Doe\\\"`\\n*   `\\\"age\\\"` with the value `30`\\n*
        \  `\\\"city\\\"` with the value `\\\"New York\\\"`\\n\\nYou can also have
        nested JSON objects:\\n\\n```\\n{\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"age\\\":
        30,\\n  \\\"city\\\": \\\"New York\\\",\\n  \\\"address\\\": {\\n    \\\"street\\\":
        \\\"123 Main St\\\",\\n    \\\"apartment\\\": \\\"4B\\\"\\n  }\\n}\\n```\\n\\nAnd
        you can have arrays of JSON objects:\\n\\n```\\n[\\n  {\\n    \\\"name\\\":
        \\\"John Doe\\\",\\n    \\\"age\\\": 30,\\n    \\\"city\\\": \\\"New York\\\"\\n
        \ },\\n  {\\n    \\\"name\\\": \\\"Jane Doe\\\",\\n    \\\"age\\\": 25,\\n
        \   \\\"city\\\": \\\"Los Angeles\\\"\\n  }\\n]\\n```\\n\\nJSON is widely
        supported by most programming languages, including Python, JavaScript, and
        Java.\\n\\nHere's an example of how you can parse a JSON string in Python:\\n\\n```\\nimport
        json\\n\\njson_string = '{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30,
        \\\"city\\\": \\\"New York\\\"}'\\ndata = json.loads(json_string)\\n\\nprint(data[\\\"name\\\"])
        \ # Output: John Doe\\nprint(data[\\\"age\\\"])   # Output: 30\\nprint(data[\\\"city\\\"])
        \ # Output: New York\\n```\\n\\nAnd here's an example of how you can create
        a JSON string from a Python object:\\n\\n```\\nimport json\\n\\ndata = {\\n
        \ \\\"name\\\": \\\"John Doe\\\",\\n  \\\"age\\\": 30,\\n  \\\"city\\\": \\\"New
        York\\\"\\n}\\n\\njson_string = json.dumps(data)\\nprint(json_string)\\n```\\n\\nThis
        will output:\\n\\n```\\n{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30,
        \\\"city\\\": \\\"New York\\\"}\\n```\\n\\nWhat would you like to do with
        JSON?\",\n        \"tool_calls\": []\n      },\n      \"logprobs\": null,\n
        \     \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        39,\n    \"total_tokens\": 503,\n    \"completion_tokens\": 464\n  }\n}"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8da72c5798c19e76-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 30 Oct 2024 00:09:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=2592000; includeSubDomains
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '2278'
      etag:
      - W/"8e6-7yQzQ73wjmbI7AW29L9mnVRDfqo"
      x-api-call-end:
      - '2024-10-30T00:09:00.945Z'
      x-api-call-start:
      - '2024-10-30T00:08:51.172Z'
      x-api-received:
      - '2024-10-30T00:08:51.166Z'
      x-inference-version:
      - v2
      x-ratelimit:
      - 'false'
      x-ratelimit-limit:
      - '100'
      x-ratelimit-limit-tokens:
      - '100000'
      x-ratelimit-remaining:
      - '198'
      x-ratelimit-remaining-tokens:
      - '96836'
      x-ratelimit-reset:
      - '1'
    status:
      code: 200
      message: OK
version: 1
