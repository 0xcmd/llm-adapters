interactions:
- request:
    body: '{"messages": [{"role": "user", "content": [{"type": "text", "text": "Hi"},
      {"type": "text", "text": "Hi"}]}], "model": "llama3.1-70b", "stream": false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '151'
      content-type:
      - application/json
      host:
      - api.cerebras.ai
      user-agent:
      - AsyncOpenAI/Python 1.53.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.53.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.cerebras.ai/v1/chat/completions
  response:
    body:
      string: '{"id":"chatcmpl-f135fa4a-6b76-48aa-b49a-f2e79c246d7c","choices":[{"finish_reason":"stop","index":0,"message":{"content":"It
        seems like you''re dealing with a list of dictionaries in Python, where each
        dictionary represents a message with a ''type'' and ''text''.\n\nHere''s a
        breakdown of what this data structure represents:\n\n- The list contains two
        dictionaries, each representing a message.\n- The ''type'' key in each dictionary
        indicates that it''s a ''text'' message.\n- The ''text'' key in each dictionary
        holds the actual message content, which in this case is ''Hi'' for both messages.\n\nHere
        is an example of how you could work with this data in Python:\n\n```python\n#
        The list of messages\nmessages = [{''type'': ''text'', ''text'': ''Hi''},
        {''type'': ''text'', ''text'': ''Hi''}]\n\n# Loop through each message in
        the list\nfor message in messages:\n    # Check the message type\n    if message[''type'']
        == ''text'':\n        # Print the message text\n        print(message[''text''])\n```\n\nThis
        would output:\n\n```\nHi\nHi\n```","role":"assistant"}}],"created":1730332135,"model":"llama3.1-70b","system_fingerprint":"fp_55ebaf7e1e","object":"chat.completion","usage":{"prompt_tokens":61,"completion_tokens":207,"total_tokens":268},"time_info":{"queue_time":2.973e-05,"prompt_time":0.0033165780097087383,"completion_time":0.12261727599029125,"total_time":0.12744569778442383,"created":1730332135}}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 30 Oct 2024 23:48:55 GMT
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 01afb90e0628e0251f333cf8af249756.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - xNK3rKPtPfJimyU_foWcXFEdvU8r5ZjqcbZLE8EOjYpgyIzLMKts-w==
      X-Amz-Cf-Pop:
      - SFO20-C1
      X-Cache:
      - Miss from cloudfront
      content-length:
      - '1381'
      referrer-policy:
      - strict-origin-when-cross-origin
      server:
      - uvicorn
      strict-transport-security:
      - max-age=3600; includeSubDomains
      vary:
      - accept-encoding
      x-content-type-options:
      - nosniff
      x-ratelimit-limit-requests-day:
      - '14400'
      x-ratelimit-limit-tokens-minute:
      - '60000'
      x-ratelimit-remaining-requests-day:
      - '14374'
      x-ratelimit-remaining-tokens-minute:
      - '59819'
      x-ratelimit-reset-requests-day:
      - '664.8242354393005'
      x-ratelimit-reset-tokens-minute:
      - '4.824235439300537'
      x-request-id:
      - xNK3rKPtPfJimyU_foWcXFEdvU8r5ZjqcbZLE8EOjYpgyIzLMKts-w==
    status:
      code: 200
      message: OK
version: 1
