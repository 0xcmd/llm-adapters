interactions:
- request:
    body: '{"messages": [{"role": "user", "content": [{"type": "text", "text": "Hi"},
      {"type": "text", "text": "Hi"}]}], "model": "mistralai/Mistral-7B-Instruct-v0.2"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '156'
      content-type:
      - application/json
      host:
      - api.together.xyz
      user-agent:
      - OpenAI/Python 1.30.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.30.4
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.6
    method: POST
    uri: https://api.together.xyz/chat/completions
  response:
    body:
      string: '{"id":"88b8ae5ec9532578-SJC","object":"chat.completion","created":1717008766,"model":"mistralai/Mistral-7B-Instruct-v0.2","prompt":[],"choices":[{"finish_reason":"eos","logprobs":null,"index":0,"message":{"role":"assistant","content":"
        It seems like you have provided two object literals as a string, but they
        are not valid JavaScript code. To understand the content of those objects,
        you need to parse them first. Here''s an example of how to parse and work
        with the objects:\n\n```javascript\n// Parse the object literals from the
        string\nconst obj1 = JSON.parse(''{ \"name\": \"John\", \"age\": 30 }'');\nconst
        obj2 = JSON.parse(''{ \"city\": \"New York\", \"country\": \"USA\" }'');\n\n//
        Access properties of the objects\nconsole.log(obj1.name); // John\nconsole.log(obj1.age);
        // 30\n\nconsole.log(obj2.city); // New York\nconsole.log(obj2.country); //
        USA\n\n// Merge the objects\nconst mergedObj = { ...obj1, ...obj2 };\nconsole.log(mergedObj);
        // { name: ''John'', age: 30, city: ''New York'', country: ''USA'' }\n```\n\nMake
        sure to replace the string with the actual object literals you want to parse."}}],"usage":{"prompt_tokens":17,"completion_tokens":254,"total_tokens":271}}'
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 88b8ae5ec9532578-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 29 May 2024 18:52:46 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1178'
      etag:
      - '"17wkivon4suwq"'
      vary:
      - Accept-Encoding
      x-api-call-end:
      - '2024-05-29T18:52:46.630Z'
      x-api-call-start:
      - '2024-05-29T18:52:42.491Z'
      x-api-received:
      - '2024-05-29T18:52:22.231Z'
      x-api-retries:
      - '1'
      x-compute-characters:
      - '49'
      x-compute-time:
      - '3784'
      x-hostname:
      - mistralai-mistral-7b-instruct-v0-2-7579599b47-jqplz
      x-inference-time:
      - '3771'
      x-inference-version:
      - v2
      x-queue-time:
      - '12'
      x-ratelimit-limit:
      - '200'
      x-ratelimit-remaining:
      - '199'
      x-ratelimit-reset:
      - '2'
      x-time-per-token:
      - '14'
      x-total-time:
      - '3784'
      x-validation-time:
      - '0'
    status:
      code: 200
      message: OK
version: 1
