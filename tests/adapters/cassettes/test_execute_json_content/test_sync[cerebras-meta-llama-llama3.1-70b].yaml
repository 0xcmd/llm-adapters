interactions:
- request:
    body: '{"messages": [{"role": "user", "content": [{"type": "text", "text": "Hi"},
      {"type": "text", "text": "Hi"}]}], "model": "llama3.1-70b", "stream": false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '151'
      content-type:
      - application/json
      host:
      - api.cerebras.ai
      user-agent:
      - OpenAI/Python 1.53.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.53.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.cerebras.ai/v1/chat/completions
  response:
    body:
      string: '{"id":"chatcmpl-057efdff-a5a8-4e95-9431-5f28add5adac","choices":[{"finish_reason":"stop","index":0,"message":{"content":"It
        seems like you have a list of dictionaries containing chat messages. Each
        dictionary has two keys: ''type'' and ''text''.\n\nHere''s an explanation
        of what this data structure might represent:\n\n- `{''type'': ''text'', ''text'':
        ''Hi''}`: This dictionary represents a chat message with type ''text'' (meaning
        it''s a plain text message) and the content of the message is ''Hi''.\n\nIf
        you''re trying to process or analyze this data, here are a few things you
        could do:\n\n1. **Extract all messages:** You can loop through the list and
        print each message.\n\n    ```python\nmessages = [{''type'': ''text'', ''text'':
        ''Hi''}, {''type'': ''text'', ''text'': ''Hi''}]\n\nfor message in messages:\n    print(message[''text''])\n```\n\n2.
        **Count the number of messages:** You can use the `len()` function to count
        the number of messages.\n\n    ```python\nmessages = [{''type'': ''text'',
        ''text'': ''Hi''}, {''type'': ''text'', ''text'': ''Hi''}]\n\nprint(len(messages))\n```\n\n3.
        **Filter by message type:** You can loop through the list and check each message''s
        type.\n\n    ```python\nmessages = [{''type'': ''text'', ''text'': ''Hi''},
        {''type'': ''image'', ''text'': ''Image''}]\n\nfor message in messages:\n    if
        message[''type''] == ''text'':\n        print(message[''text''])\n```\n\nRemember
        to replace `messages` with your actual list of dictionaries.","role":"assistant"}}],"created":1730332178,"model":"llama3.1-70b","system_fingerprint":"fp_55ebaf7e1e","object":"chat.completion","usage":{"prompt_tokens":61,"completion_tokens":316,"total_tokens":377},"time_info":{"queue_time":2.613e-05,"prompt_time":0.0033499467492063492,"completion_time":0.17013226725079367,"total_time":0.17490363121032715,"created":1730332178}}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 30 Oct 2024 23:49:39 GMT
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 1f2a2b4522308aae8508a9096d87b334.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - QZ1s3VbMfA-WZglJWA62b-pminbPRoIjlDpbMWwxE9Wd2KzPk4cF2A==
      X-Amz-Cf-Pop:
      - SFO20-C1
      X-Cache:
      - Miss from cloudfront
      content-length:
      - '1779'
      referrer-policy:
      - strict-origin-when-cross-origin
      server:
      - uvicorn
      strict-transport-security:
      - max-age=3600; includeSubDomains
      vary:
      - accept-encoding
      x-content-type-options:
      - nosniff
      x-ratelimit-limit-requests-day:
      - '14400'
      x-ratelimit-limit-tokens-minute:
      - '60000'
      x-ratelimit-remaining-requests-day:
      - '14371'
      x-ratelimit-remaining-tokens-minute:
      - '59921'
      x-ratelimit-reset-requests-day:
      - '620.9669086933136'
      x-ratelimit-reset-tokens-minute:
      - '20.9669086933136'
      x-request-id:
      - QZ1s3VbMfA-WZglJWA62b-pminbPRoIjlDpbMWwxE9Wd2KzPk4cF2A==
    status:
      code: 200
      message: OK
version: 1
