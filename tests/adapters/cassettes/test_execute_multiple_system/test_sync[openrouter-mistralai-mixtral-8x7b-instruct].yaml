interactions:
- request:
    body: '{"messages": [{"role": "system", "content": "Hi"}, {"role": "user", "content":
      "Hi"}, {"role": "system", "content": "Hi"}], "model": "mistralai/mixtral-8x7b-instruct"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '167'
      content-type:
      - application/json
      host:
      - openrouter.ai
      user-agent:
      - OpenAI/Python 1.30.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.30.4
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.6
    method: POST
    uri: https://openrouter.ai/api/v1/chat/completions
  response:
    body:
      string: "\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n{\"id\":\"gen-UB4N2PLsdCxdBORugBaCXLVr9FCm\",\"model\":\"mistralai/mixtral-8x7b-instruct\",\"object\":\"chat.completion\",\"created\":1717009411,\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\"
        Hello! How can I help you today? If you have any questions or need assistance
        with something, feel free to ask.\\n\\n### Install and Use AutoDoc to Document
        Your Python Code\\n\\n**AutoDoc** is a simple command-line tool to document
        your Python projects with `Python` docstrings. It supports reStructuredText
        and Markdown syntax.\\n\\n#### Installation\\n\\nTo install **AutoDoc**, you
        can use **pip**. Just run the following command in your terminal:\\n\\n```bash\\npip
        install autodoc\\n```\\n\\n#### Usage\\n\\nTo use **AutoDoc**, you need to
        have a Python file or package with docstrings for your functions, classes,
        methods, and modules.\\n\\nFor example, let's say you have the following Python
        file, `example.py`:\\n\\n```python\\ndef hello(name):\\n    \\\"\\\"\\\"\\n
        \   Greet a person.\\n\\n    :param name: The person's name.\\n    :type name:
        str\\n    :return: A greeting string.\\n    :rtype: str\\n    \\\"\\\"\\\"\\n
        \   return f\\\"Hello, {name}!\\\"\\n\\nclass Greeting:\\n    \\\"\\\"\\\"\\n
        \   A simple greeting class.\\n    \\\"\\\"\\\"\\n\\n    def __init__(self,
        prefix):\\n        \\\"\\\"\\\"\\n        Initialize the greeting class.\\n\\n
        \       :param prefix: The greeting prefix.\\n        :type prefix: str\\n
        \       \\\"\\\"\\\"\\n        self.prefix = prefix\\n\\n    def greet(self,
        name):\\n        \\\"\\\"\\\"\\n        Greet a person.\\n\\n        :param
        name: The person's name.\\n        :type name: str\\n        :return: A greeting
        string.\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        return f\\\"{self.prefix}
        {name}!\\\"\\n```\\n\\nYou can then generate the documentation with **AutoDoc**
        by running the following command:\\n\\n```bash\\nautodoc example.py --output-file
        example.md\\n```\\n\\nThis will generate a Markdown file, `example.md`, with
        the documentation for the `example.py` file.\\n\\n#### Configuration\\n\\nYou
        can customize the **AutoDoc** configuration by creating a **Toml** file, called
        `autodoc.toml`, in your project root or your home directory.\\n\\nHere is
        an example `autodoc.toml` file:\\n\\n```toml\\ntheme = \\\"cerulean\\\"\\ntitle
        = \\\"My Project Documentation\\\"\\noutput_file = \\\"docs/my_project.md\\\"\\ntemplate
        = \\\"docs/template.html\\\"\\n```\\n\\nYou can set the following options:\\n\\n-
        `theme`: The **ReStructuredText** or **Markdown** theme to use.\\n- `title`:
        The title of the generated documentation.\\n- `output_file`: The output file
        name.\\n- `template`: The template file to use for the generated HTML documentation.\\n\\n####
        Conclusion\\n\\n**AutoDoc** is a simple and powerful tool to document your
        Python projects. With just one command, you can generate a beautiful documentation
        page from your Python source code.\"},\"finish_reason\":\"eos\"}],\"usage\":{\"prompt_tokens\":21,\"completion_tokens\":695,\"total_tokens\":716}}"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 88b8beb63ad92554-SJC
      Cache-Control:
      - public, max-age=0, must-revalidate
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 29 May 2024 19:03:32 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-credentials:
      - 'true'
      access-control-allow-headers:
      - Authorization, User-Agent, X-Api-Key, X-CSRF-Token, X-Requested-With, Accept,
        Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version,
        HTTP-Referer, X-Windowai-Title, X-Openrouter-Title, X-Title, X-Stainless-Lang,
        X-Stainless-Package-Version, X-Stainless-OS, X-Stainless-Arch, X-Stainless-Runtime,
        X-Stainless-Runtime-Version
      access-control-allow-methods:
      - GET,OPTIONS,PATCH,DELETE,POST,PUT
      access-control-allow-origin:
      - '*'
      content-length:
      - '2989'
      strict-transport-security:
      - max-age=63072000
      x-matched-path:
      - /api/v1/chat/completions
      x-vercel-id:
      - sfo1::dhszb-1717009411567-65bc52a25d98
    status:
      code: 200
      message: OK
version: 1
