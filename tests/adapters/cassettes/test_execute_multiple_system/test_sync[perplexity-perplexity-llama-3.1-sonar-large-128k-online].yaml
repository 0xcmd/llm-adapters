interactions:
- request:
    body: '{"messages": [{"role": "system", "content": "Hi"}, {"role": "user", "content":
      "Hi"}, {"role": "assistant", "content": "Hi"}, {"role": "user", "content": "\"\""}],
      "model": "llama-3.1-sonar-large-128k-online"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '209'
      content-type:
      - application/json
      host:
      - api.perplexity.ai
      user-agent:
      - OpenAI/Python 1.50.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.50.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.6
    method: POST
    uri: https://api.perplexity.ai/chat/completions
  response:
    body:
      string: '{"id": "c302ca53-e6b8-4921-bd42-c69263501480", "model": "llama-3.1-sonar-large-128k-online",
        "created": 1728509525, "usage": {"prompt_tokens": 4, "completion_tokens":
        289, "total_tokens": 293}, "object": "chat.completion", "choices": [{"index":
        0, "finish_reason": "stop", "message": {"role": "assistant", "content": "To
        match a JSON key with a non-empty string value using a regular expression,
        you need to ensure that the string inside the quotes is not empty. Here\u2019s
        how you can achieve this:\n\n## Using Regular Expressions\n\nYou can use a
        regular expression that matches the key and ensures the value is not an empty
        string. Here is an example:\n\n```regex\n\"key\":\"[^\"]+\"\n```\n\n- `[^\"]+`
        matches one or more characters that are not double quotes, ensuring the string
        is not empty.\n\nHere\u2019s a more complete example to match the specific
        structure of your JSON:\n\n```regex\n\"key\":\"[^\"]+\"\n```\n\nThis will
        match any instance of `\"key\": \"some_string_value\"` where `some_string_value`
        is not empty.\n\n## Example in Notepad++\n\nIf you are using Notepad++''s
        regex search tool, you can use the following regex to find such instances:\n\n-
        Search for: `\"key\":\"[^\"]+\"`\n\nThis will highlight all occurrences of
        the key `\"key\"` with a non-empty string value.\n\n## Explanation\n\n- `\"key\":`
        matches the literal string `\"key\":`.\n- `\"[^\"]+\"` matches a double quote
        followed by one or more characters that are not double quotes, and then another
        double quote. This ensures the string value is not empty.\n\nThis approach
        should help you find the keys with non-empty string values in your JSON file."},
        "delta": {"role": "assistant", "content": ""}}]}'
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8d017b104a9b317c-TBS
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Oct 2024 21:32:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      content-length:
      - '1689'
    status:
      code: 200
      message: OK
version: 1
