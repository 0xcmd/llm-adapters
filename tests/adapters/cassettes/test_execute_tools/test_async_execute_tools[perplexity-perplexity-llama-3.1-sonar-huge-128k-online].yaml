interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Generate random number"}], "model":
      "llama-3.1-sonar-huge-128k-online", "stream": false, "tool_choice": {"type":
      "function", "function": {"name": "generate"}}, "tools": [{"type": "function",
      "function": {"description": "Generate random number", "name": "generate", "parameters":
      {"type": "object", "properties": {"prompt": {"type": "string", "description":
      "Random number like 5, 4, 3, 10, 11"}}, "required": ["prompt"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '467'
      content-type:
      - application/json
      host:
      - api.perplexity.ai
      user-agent:
      - AsyncOpenAI/Python 1.52.2
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.52.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.perplexity.ai/chat/completions
  response:
    body:
      string: '{"id": "8b7c28c7-56be-490e-9422-f545de8b1271", "model": "llama-3.1-sonar-huge-128k-online",
        "created": 1730324615, "usage": {"prompt_tokens": 3, "completion_tokens":
        618, "total_tokens": 621}, "object": "chat.completion", "choices": [{"index":
        0, "finish_reason": "stop", "message": {"role": "assistant", "content": "Generating
        a random number can be done in various ways depending on the context and the
        level of randomness required. Here are a few methods:\n\n### 1. **JavaScript
        (Web Development)**\nYou can use `Math.random()` in JavaScript to generate
        a floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive).
        Here\u2019s how to use it to generate a random number between two values:\n\n```javascript\nfunction
        getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n//
        Example usage\nconsole.log(getRandomArbitrary(1, 10));\n```\n\nFor a random
        integer between two values (inclusive):\n\n```javascript\nfunction getRandomIntInclusive(min,
        max) {\n  const minCeiled = Math.ceil(min);\n  const maxFloored = Math.floor(max);\n  return
        Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled);\n}\n\n//
        Example usage\nconsole.log(getRandomIntInclusive(1, 10));\n```\n\n### 2. **C
        Programming (Accessing Hardware RNG)**\nFor cryptographic purposes, you might
        need to access hardware RNGs. On Linux, you can read from `/dev/urandom`:\n\n```c\n#include
        <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  FILE *fp = fopen(\"/dev/urandom\",
        \"r\");\n  if (fp == NULL) {\n    printf(\"Failed to open /dev/urandom\\n\");\n    return
        1;\n  }\n\n  unsigned int random_number;\n  fread(&random_number, sizeof(unsigned
        int), 1, fp);\n  fclose(fp);\n\n  printf(\"Random number: %u\\n\", random_number);\n  return
        0;\n}\n```\n\n### 3. **Online Tools**\nFor quick and simple random number
        generation, you can use online tools like the one provided by GIGACalculator.com.
        These tools can generate true random numbers using environmental noise and
        are suitable for lotteries, raffles, and other applications requiring unbiased
        randomization.\n\n### 4. **Excel**\nIn Microsoft Excel, you can use the `RAND`
        function to generate a random decimal number between 0 and 1, or the `RANDBETWEEN`
        function to generate a random integer between two specified numbers:\n\n```excel\n=RAND()  //
        Random decimal between 0 and 1\n=RANDBETWEEN(1, 10)  // Random integer between
        1 and 10\n```\n\n### 5. **General Considerations**\n- **Pseudo-random vs.
        True Random**: Pseudo-random numbers are generated by algorithms and can be
        predictable, while true random numbers are generated from physical processes
        and are more secure.\n- **Cryptographic Security**: For cryptographic purposes,
        use hardware RNGs or cryptographically secure pseudo-random number generators
        (CSPRNGs) to ensure unpredictability.\n\nChoose the method that best fits
        your needs based on the level of randomness and security required."}, "delta":
        {"role": "assistant", "content": ""}}]}'
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8dae942c7f57f987-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 30 Oct 2024 21:43:35 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=0CIh1wpgYEpxOoWTyFF.JPm_0vYTKU_Dzcq93EMGILI-1730324615-1.0.1.1-wEmn9GIRenyypXCzCauRRQ9jxszjoO0l2Z0B5mpF5M1QqbF3swfBF84_x78ICRlheAh3ia.pxlGj0y6WVMOJPg;
        path=/; expires=Wed, 30-Oct-24 22:13:35 GMT; domain=.perplexity.ai; HttpOnly;
        Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      content-length:
      - '2984'
    status:
      code: 200
      message: OK
version: 1
